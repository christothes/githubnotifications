@page "/indexold"
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider


<h1>Hello, world!</h1>

<p>@response</p>

<button class="btn btn-primary" @onclick="RequestPermission">Get Permission</button>
<button class="btn btn-primary" @onclick="ClearComments">Clear Comments</button>
<button class="btn btn-primary" @onclick="ClearChecks">Clear Checks</button>
@* <AuthorizedVew> *@
    @* <Authorized> *@
        <p>@_authMessage</p>

        @if (_claims.Count() > 0)
        {
            <ul>
                @foreach (var claim in _claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            </ul>
        }

        <p>@_surnameMessage</p>

        <h2>Comments</h2>
        <ul id="commentList">
            @foreach (var comment in comments.OrderByDescending(c => c.Created))
            {
                @if (comment.ReplyToBody != null)
                {
                    <li>
                        <span></span>
                        <div>
                            <span>
                                @comment.Created.ToShortDateString() @comment.Created.ToShortTimeString() - <a href="@comment.Uri">@comment.Title</a><br/><strong>@at@comment.ReplyToUser</strong> &nbsp; @comment.ReplyToBody
                            </span>
                        </div>
                        <ul>
                            <li>
                                <div>
                                    <span>
                                        <strong>@at@comment.User</strong>@comment.Body
                                    </span>
                                </div>
                            </li>
                        </ul>
                    </li>
                }
                else
                {
                    <li>
                        <div>
                            <span>
                                @comment.Created.ToShortDateString() @comment.Created.ToShortTimeString() - <a href="@comment.Uri"> @comment.Title</a><br/><strong>@at@comment.User</strong> &nbsp; @comment.Body
                            </span>
                        </div>
                    </li>
                }
            }
        </ul>
        <h2>Check Failures</h2>
        <ul id="messagesList">
            @foreach (var message in checks)
            {
                <li>@message</li>
            }
        </ul>
    @* </Authorized> *@
    @* <NotAuthorized> *@
        <h2>Login</h2>
    @* </NotAuthorized> *@
@* </AuthorizedVew> *@

@code {
    private object permission;
    private string response = "none";
    private string icon = "images/github.png";
    private int id = 1;
    private object notif;
    private string at = "@";
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    private async Task RequestPermission()
    {
        try
        {
            permission = await JS.InvokeAsync<object>("requestPermission");
            await GetClaimsPrincipalData();
        }
        catch (Exception ex)
        { }
    }

    private void ClearComments()
    {
        comments.Clear();
        StateHasChanged();
    }

    private void ClearChecks()
    {
        checks.Clear();
        StateHasChanged();
    }

    private async Task CreateNotifcationAsync(DateTime updated, string id, string title, string body, string url)
    {
        var options = new
        {
            Body = body,
            Icon = icon,
            Renotify = true, // By default a notification is not overwritten, so there can only be one.
            RequireInteraction = false,
            Tag = id,
            TimeStamp = updated,
            Uri = url
        };
        try
        {
            await Send();
            notif = await JS.InvokeAsync<object>("createNotification", title, options);
        }
        catch (Exception ex)
        { }
    }

    private HubConnection hubConnection;
    private List<string> checks = new List<string>(30) { "foo" };
    private List<Comment> comments = new List<Comment>();
    private string userInput = "my input";
    private string messageInput = "test input";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationshub"))
            .Build();

        hubConnection.On<DateTime, string, string, string, string>("CheckStatus", (updated, id, title, message, url) =>
        {
            var encodedMsg = $"{title}: {message}";
            checks.Add(encodedMsg);
            StateHasChanged();
            CreateNotifcationAsync(updated, id, title, message, url).GetAwaiter().GetResult();
        });

        hubConnection.On<DateTime, string, string, string, string, string, string, string>("Comment", (updated, id, user, title, body, url, replytouser, replytobody) =>
        {
            Comment comment = new Comment(id, user, url, updated.ToLocalTime(), title, body, replytouser, replytobody);
            if (comments.Count == 30)
            {
                comments.RemoveAt(0);
            }
            comments.Add(comment);
            StateHasChanged();
            CreateNotifcationAsync(updated, id, title, $"@{user}: {body}", url).GetAwaiter().GetResult();
        });


        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() { await hubConnection.DisposeAsync(); }
}