@page "/"
@inject NavigationManager NavigationManager
@inject HostAuthenticationStateProvider AuthStateProvider
@inject DataService DataService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client

<AuthorizeView>
    <Authorized>
        <div class="progress" style="height: 5px;  visibility: @DataService.IsInProgress;">
            <div class="progress-bar" role="progressbar" style="width: @DataService.Progress;"></div>
        </div>
        <div class="custom-control custom-switch">
            <input type="checkbox" id="prOption" class="custom-control-input" @bind="DataService.OnlyMyPRs" @onclick="DataService.OnlyMyPRsClick"> 
            <label class="custom-control-label" for="prOption">Show only my PRs</label>
        </div>
         <div>
            <h3>Check Failures</h3>
            <ul id="messagesList">
                @foreach (var message in DataService.checks)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
        <div>
            <h3>Comments</h3>
            <div id="commentList" class="list-group" style="overflow-wrap: anywhere;">
                @foreach (var comment in DataService.commentLookup.Values.OrderByDescending(c => c.sortDate))
                {
                    <CommentItem Comment="@comment"></CommentItem>
                }
            </div>
        </div>
       
    </Authorized>
    <NotAuthorized>
        Please Log in.
    </NotAuthorized>
</AuthorizeView>


@code {
    private string permission;
    protected override async Task OnInitializedAsync()
    {       
        @* var AuthState = await AuthStateProvider.GetAuthenticationStateAsync(); *@
        @* userLogin = AuthState.User.GetGitHubLogin(); *@
        permission = await GetPermissionState();
        if (permission != "granted")
        {
            await RequestPermission();
        }

        await DataService.InitAsync(() => StateHasChanged());
        StateHasChanged();
    }

    async Task<string> GetPermissionState() => await JS.InvokeAsync<string>("currentPermission");

    private async Task RequestPermission()
    {
        try
        {
            await JS.InvokeAsync<object>("requestPermission");
        }
        catch (Exception)
        { }
    }
}