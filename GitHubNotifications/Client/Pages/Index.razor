@page "/"
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client


<h1>Hello, world!</h1>

<p>@response</p>

<button class="btn btn-primary" @onclick="RequestPermission">Get Permission</button>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private object permission;
    private string response = "none";
    private string icon = "images/github.png";
    private int id = 1;
    private object notif;

    private async Task RequestPermission()
    {
        try
        {
            permission = await JS.InvokeAsync<object>("requestPermission");
        }
        catch (Exception ex)
        {

        }
    }

    private async Task CreateNotifcationAsync(DateTime updated, string id,string title, string body, string url)
    {
        var options = new
        {
            Body = body,
            Icon = icon,
            Renotify = true, // By default a notification is not overwritten, so there can only be one.
            RequireInteraction = false,
            Tag = id,
            TimeStamp = updated,
            Uri = url        };
        try
        {
            await Send();
            notif = await JS.InvokeAsync<object>("createNotification", title, options);
        }
        catch (Exception ex)
        {

        }
    }

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput = "my input";
    private string messageInput = "test input";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationshub"))
            .Build();

        hubConnection.On<DateTime, string, string, string, string>("ReceiveMessage", (updated, id, title, message, url) =>
        {
            var encodedMsg = $"{title}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
            CreateNotifcationAsync(updated, id, title, message, url).GetAwaiter().GetResult();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}

