@page "/"
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager
@inject HostAuthenticationStateProvider AuthStateProvider
@using GitHubNotifications.Shared
@using Microsoft.AspNetCore.SignalR.Client

<AuthorizeView>
    <Authorized>
        Notifications: @permission, Hub connected: @IsConnected

        <h2>Comments</h2>
        <ul id="commentList">
            @foreach (var comment in comments.OrderByDescending(c => c.created))
            {
                <CommentItem Comment="@comment"></CommentItem>
            }
        </ul>
        <h2>Check Failures</h2>
        <ul id="messagesList">
            @foreach (var message in checks)
            {
                <li>@message</li>
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        <a href="auth/signin">Log in</a>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string permission;
    private string icon = "images/github.png";
    private object notif;
    private string at = "@";

    private async Task RequestPermission()
    {
        try
        {
            await JS.InvokeAsync<object>("requestPermission");
        }
        catch (Exception)
        { }
    }

    private void ClearComments()
    {
        comments.Clear();
        StateHasChanged();
    }

    private void ClearChecks()
    {
        checks.Clear();
        StateHasChanged();
    }

    private async Task CreateNotifcationAsync(DateTime updated, string id, string title, string body, string url)
    {
        var options = new
        {
            Body = body,
            Icon = icon,
            Renotify = true, // By default a notification is not overwritten, so there can only be one.
            RequireInteraction = false,
            Tag = id,
            TimeStamp = updated,
            Uri = url
        };
        try
        {
            notif = await JS.InvokeAsync<object>("createNotification", title, options);
        }
        catch (Exception)
        { }
    }

    private HubConnection hubConnection;
    private List<string> checks = new(30);
    private List<Comment> comments = new();
    private Dictionary<string, Comment> commentLookup = new();
    private string userInput = "my input";
    private string messageInput = "test input";

    protected override async Task OnInitializedAsync()
    {
        permission = await GetPermissionState();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationshub"))
            .Build();

        hubConnection.On<DateTime, string, string, string, string>("CheckStatus", (updated, id, title, message, url) =>
        {
            var encodedMsg = $"{title}: {message}";
            checks.Add(encodedMsg);
            StateHasChanged();
            CreateNotifcationAsync(updated, id, title, message, url).GetAwaiter().GetResult();
        });

        hubConnection.On<Comment>("NewComment", (comment) =>
        {
            if (string.IsNullOrEmpty(comment.replyToId))
            {
                commentLookup[comment.id] = comment;
            }
            else
            {
                if (commentLookup.TryGetValue(comment.id, out var parent))
                {
                    parent.Replies ??= new List<Comment>();
                    parent.Replies.Add(comment);
                }
            }
            if (comments.Count == 30)
            {
                comments.RemoveAt(0);
            }
            comments.Add(comment);
            StateHasChanged();
            CreateNotifcationAsync(
                comment.created,
                comment.id,
                comment.title,
                $"@{comment.author}: {comment.body}",
                comment.uri).GetAwaiter().GetResult();
        });

        var AuthState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!IsConnected && AuthState.User.Claims.Any())
        {
            await Connect();
        }
    }

    async Task Connect() { await hubConnection.StartAsync(); }

    async Task<string> GetPermissionState() => await JS.InvokeAsync<string>("currentPermission");

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() { await hubConnection.DisposeAsync(); }
}